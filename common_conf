#!/bin/bash

# Function to check if a package is installed
is_package_installed() {
    if [ -n "$(command -v "$1")" ]; then
        return 0
    else
        return 1
    fi
}

# Function to install Homebrew on OSX
install_homebrew() {
    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
}

# Function to install packages using Homebrew (OSX)
install_packages_osx() {
    if ! is_package_installed "brew"; then
        echo "[!]: Homebrew not installed. Installing Homebrew..."
        install_homebrew
    fi

    echo "[!]: Installing common packages using Homebrew..."
    brew install cmake llvm neovim vim gcc dotnet python rustup
    brew install --cask emacs
    
    # Replace Apple Clang with Homebrew Clang and GCC
    brew link --overwrite llvm
    brew link --overwrite gcc

    # Install Rustup
    if ! is_package_installed "rustc"; then
        rustup-init
    fi
}

# Function to install packages using APT
install_packages_apt() {
    echo "[!]: Installing packages using APT..."
    sudo apt update
    sudo apt install -y cmake llvm tmux neovim vim gcc emacs
    sudo apt install -y build-essential  # Install essential build tools
    # Install Rust using rustup
    if ! is_package_installed "rust"; then
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        rustup toolchain install nightly --allow-downgrade --profile minimal --component clippy
    fi
}

# Function to install packages using PACMAN
install_packages_pacman() {
    echo "[!]: Installing packages using PACMAN..."
    sudo pacman -Syu
    sudo pacman -S cmake llvm tmux neovim vim gcc rustup emacs
    # Install Rust using rustup
    if ! is_package_installed "rustc"; then
        rustup toolchain install nightly --allow-downgrade --profile minimal --component clippy
    fi
}

# Function to install doom emacs
install_doom_emacs() {
    echo "[!]: Installing DOOM Emacs..."
    git clone --depth 1 https://github.com/doomemacs/doomemacs $HOME/.emacs.d
    $HOME/.emacs.d/bin/doom install
    $HOME/.emacs.d/bin/doom sync
}

# Function to install fonts and refresh font cache
install_fonts() {
    local font_urls=("https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/JetBrainsMono.zip"
                     "https://github.com/ryanoasis/nerd-fonts/releases/download/v3.0.2/Hack.zip")

    echo "[!]: Downloading and installing fonts..."
    for url in "${font_urls[@]}"; do
        wget "$url" -P "$HOME/Downloads"
        unzip -q "$HOME/Downloads"/*.ttf ~/.local/share/fonts
    done

    echo "[!]: Done."
    echo "[!]: Refreshing font cache..."
    fc-cache -f -v
}

# Configure neovim
configure_neovim() {
	if [ "$1" != "win" ]; then
		git clone --depth 1 https://github.com/wbthomason/packer.nvim\
		$HOME/.local/share/nvim/site/pack/packer/start/packer.nvim
	else
		powershell -c 'git clone https://github.com/wbthomason/packer.nvim "$env:LOCALAPPDATA\nvim-data\site\pack\packer\start\packer.nvim"'
	fi
	echo "[!]: Run :PackerSync in neovim to install packages."
}

# Determine OS and configure accordingly
if [ "$(uname -s)" == "Darwin" ]; then
    echo "[!]: Detected OSX."
    install_packages_osx
    install_fonts
    configure_neovim
elif [ "$(uname -s)" == "Linux" ]; then
    echo "[!]: Detected Linux."
    if is_package_installed "apt"; then
        #install_packages_apt
        install_fonts
        #configure_neovim
    elif is_package_installed "pacman"; then
        install_packages_pacman
        install_fonts
        configure_neovim
    else
        echo "[!]: Unsupported package manager."
    fi

    if ! is_package_installed "doom"; then
        install_doom_emacs
    fi
elif [[ "$(uname -s | tr '[:upper:]' '[:lower:]')" =~ ^(msys|cygwin|mingw) ]]; then
	echo "[!]: Detected Microsoft Windows."
	if ! is_package_installed "scoop"; then
		echo "[!]: Scoop not installed. Installing Scoop..."
		powershell -c "Set-ExecutionPolicy RemoteSigned -Scope CurrentUser && irm get.scoop.sh | iex"	
	install_packages_scoop
	fi
	install_doom_emacs
	configure_neovim "win"
else
    echo "[!]: Unsupported OS."
fi

echo "[!]: Script finished."
